{"version":3,"sources":["components/fields/numberfield.component.jsx","components/fields/textfield.component.jsx","components/fields/textarea.component.jsx","components/fields/checkbox.component.jsx","components/fields/radiobutton.component.jsx","components/fields/date.component.jsx","components/fields/button.component.jsx","components/result.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Numberfield","props","label","value","useState","valueState","setValueState","className","name","type","onChange","e","target","Textfield","Textarea","Checkbox","checked","checkbox","setcheckbox","JSON","parse","Radiobutton","values","map","el","idx","key","Date","Button","Result","form","obj","stringify","JSONdata","newObj","App","state","json","types","text","handleChange","bind","handleSubmit","event","this","setState","preventDefault","onSubmit","cols","rows","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8d04fa8b.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n\r\nconst Numberfield = (props) => {\r\n    const { label, value } = props\r\n    const [valueState, setValueState] = useState(value)\r\n\treturn (\r\n\t\t<div className='form-items'>\r\n\t\t\t\t<h6>{label}</h6>\r\n\t\t\t\t<input\r\n\t\t\t\t\tname=\"numberField\"\r\n\t\t\t\t\ttype=\"number\"\r\n\t\t\t\t\tvalue={valueState}\r\n\t\t\t\t\tonChange={(e) => setValueState(e.target.value)}\r\n\t\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Numberfield;\r\n","import React, { useState } from 'react';\r\n\r\nconst Textfield = (props) => {\r\n    const { label, value } = props\r\n    const [valueState, setValueState] = useState(value)\r\n\r\n\treturn (\r\n\t\t<div className='form-items'>\r\n\t\t\t<h6>{label}</h6>\r\n\t\t\t<input type=\"text\" value={valueState} onChange={(e) => setValueState(e.target.value)}  />\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Textfield;\r\n","import React, { useState } from 'react';\r\n\r\nconst Textarea = (props) => {\r\n    const { label, value } = props\r\n    const [valueState, setValueState] = useState(value)\r\n\treturn (\r\n\t\t<div className='form-items'>\r\n\t\t\t<h6>{label}</h6>\r\n            <textarea \r\n                value={valueState} \r\n                onChange={(e) => setValueState(e.target.value)} \r\n            />\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Textarea;\r\n","import React, { useState } from 'react';\r\n\r\nconst Checkbox = (props) => {\r\n    const { label, checked } = props\r\n    const [checkbox, setcheckbox] = useState(checked)\r\n\treturn (\r\n\t\t<div className='form-items'>\r\n\t\t\t<h6>{label}</h6>\r\n            <input \r\n                name={label} \r\n                type=\"checkbox\" \r\n                checked={JSON.parse(checkbox)} \r\n                onChange={(e) => {setcheckbox(e.target.checked)}}\r\n            />\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Checkbox;\r\n","import React from 'react';\r\n\r\nconst Radiobutton = (props) => {\r\n\tconst { label, values } = props;\r\n\treturn (\r\n\t\t\t<div className='form-items'>\r\n\t\t\t\t<h6>{label}</h6>\r\n\t\t\t\t{values.map((el, idx) => (\r\n                    <div key={idx+label}>\r\n                        {el}\r\n                        <input \r\n                            name={label} \r\n                            type=\"radio\" \r\n                            value={el}\r\n                        />\r\n                    </div>\r\n                    ))\r\n                }\r\n\t\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Radiobutton;\r\n","import React from 'react'\r\n\r\nconst Date = (props) => {\r\n    const { label } = props;\r\n    return (\r\n        <div className='form-items'>\r\n            <h6>{label}</h6>\r\n            <input type=\"date\" name=\"bday\"></input>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Date\r\n","import React from 'react'\r\n\r\nconst Button = (props) => {\r\n    const { name } = props\r\n\r\n    return (\r\n        <div className=\"buttons\">\r\n           <button >\r\n                {name}\r\n            </button> \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Button\r\n","import React from 'react';\r\nimport Numberfield from './fields/numberfield.component';\r\nimport Textfield from './fields/textfield.component';\r\nimport Textarea from './fields/textarea.component';\r\nimport Checkbox from './fields/checkbox.component';\r\nimport Radiobutton from './fields/radiobutton.component';\r\nimport Date from './fields/date.component';\r\nimport Button from './fields/button.component';\r\n\r\n\r\nconst Result = (props) => {\r\n    const { form, label, value, checked, values, name  } = props\r\n\tswitch (form) {\r\n\t\tcase \"numberfield\":\r\n            return <Numberfield label={label} value={value} />\r\n\t\tcase \"textfield\":\r\n            return <Textfield label={label} value={value} />\r\n\t\tcase \"textarea\":\r\n            return <Textarea label={label} value={value} />\r\n\t\tcase \"checkbox\":\r\n            return <Checkbox label={label} checked={checked} />\r\n\t\tcase \"radio\":\r\n            return <Radiobutton label={label} values={values} />\r\n\t\tcase \"date\":\r\n            return <Date label={label} />\r\n\t\tcase \"button\":\r\n\t\t\treturn <Button  name={name} />  \r\n\r\n\t\tdefault:\r\n\t\t\treturn <h6>Please, check the JSON input</h6>;\r\n\t}\r\n\r\n};\r\n\r\nexport default Result;\r\n","import React, { Component } from 'react';\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs';\nimport Result from './components/result.component';\nimport JSONdata from './assets/input.json';\nimport './App.css';\nimport 'react-tabs/style/react-tabs.css';\n\n\n// parse JSON file to JS object\nconst obj = JSON.stringify(JSONdata, null, 4);\nconst newObj = JSON.parse(obj)\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      json: newObj.types,\n      text: obj\n    }\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n\n  }\n\n\n  handleChange(event) {\n\n    this.setState({ text: event.target.value  });\n\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    let obj = JSON.parse(this.state.text)\n    this.setState( {json: obj.types}  );\n  }\n\n  render() {\n    const { json } = this.state;\n    return (\n      <div className=\"App\">\n        <Tabs>\n          <TabList>\n            <Tab>Result</Tab>\n            <Tab>Config</Tab>\n          </TabList>\n          <TabPanel>\n            <form className='form'>\n              {\n                json.map((el, idx) => (\n                  <Result key={idx+el.form} {...el} />\n                ))\n              }\n            </form>\n          </TabPanel>\n          <TabPanel>\n            <div>\n              <form  onSubmit={this.handleSubmit}>\n                <textarea cols=\"50\" rows=\"20\" value={this.state.text} onChange={this.handleChange} />\n                <br />\n                <input type=\"submit\" value=\"Submit\" />\n              </form>\n            </div>\n          </TabPanel>\n\n        </Tabs>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}